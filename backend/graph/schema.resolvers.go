package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"backend/graph/model"
	"backend/k8s"
	"context"
	"fmt"

	"knative.dev/pkg/apis"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Routes is the resolver for the routes field.
func (r *queryResolver) Routes(ctx context.Context) ([]*model.Route, error) {
	c, err := k8s.NewClient()
	fmt.Println(err)
	rs := c.GetRoutes()

	mr := []*model.Route{}
	for _, v := range rs {
		mr = append(mr, &model.Route{
			Name:  v.Name,
			URL:   v.Status.URL.String(),
			Ready: v.Status.GetCondition(apis.ConditionReady).IsTrue(),
		})
	}

	return mr, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
